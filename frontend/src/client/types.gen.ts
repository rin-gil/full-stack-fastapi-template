/**
 * @file Defines all auto-generated OpenAPI types for the client.
 * @description This file contains all the data models, request bodies, and response types
 *              generated by @hey-api/openapi-ts based on the API schema.
 * @module ApiTypes
 */

/**
 * @description A model for handling HTTP validation errors.
 * @property {Array<ValidationError>} [detail] - A list of validation error details.
 */
export type HTTPValidationError = { detail?: Array<ValidationError> }

/**
 * @description A model for creating a new item via API.
 * @property {string} title - The title of the item.
 * @property {string | null} [description] - The description of the item (optional).
 */
export type ItemCreate = {
  title: string
  description?: string | null
}

/**
 * @description Public model of an item returned via API.
 * @property {string} title - The title of the item.
 * @property {string | null} [description] - The description of the item (optional).
 * @property {string} id - UUID of the item.
 * @property {string} owner_id - UUID of the user who owns the item.
 */
export type ItemPublic = {
  title: string
  description?: string | null
  id: string
  owner_id: string
}

/**
 * @description A model for returning a list of items with pagination.
 * @property {Array<ItemPublic>} data - List of items.
 * @property {number} count - Total number of items.
 */
export type ItemsPublic = {
  data: Array<ItemPublic>
  count: number
}

/**
 * @description Model for updating item data.
 * @property {string | null} [title] - The title of the item (optional).
 * @property {string | null} [description] - The description of the item (optional).
 */
export type ItemUpdate = {
  title?: string | null
  description?: string | null
}

/**
 * @description Data model for the OAuth2 password grant type used in access token requests.
 * @property {string | null} [grant_type] - The OAuth2 grant type.
 * @property {string} username - The user's email address.
 * @property {string} password - The user's password.
 * @property {string} [scope] - The required scopes.
 * @property {string | null} [client_id] - The client ID (optional).
 * @property {string | null} [client_secret] - The client secret (optional).
 */
export type login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

/**
 * @description A model for sending simple text messages.
 * @property {string} message - The text message.
 */
export type Message = {
  message: string
}

/**
 * @description A model for setting a new password using a reset token.
 * @property {string} token - The reset token received by the user.
 * @property {string} new_password - The new password.
 */
export type NewPassword = {
  token: string
  new_password: string
}

/**
 * @description Response model with a JWT access token.
 * @property {string} access_token - The JWT access token.
 * @property {string} [token_type] - The type of token (e.g., "bearer").
 */
export type Token = {
  access_token: string
  token_type?: string
}

/**
 * @description Model for updating the current user's password.
 * @property {string} current_password - The current password of the user.
 * @property {string} new_password - The new password for the user.
 */
export type UpdatePassword = {
  current_password: string
  new_password: string
}

/**
 * @description Model for creating a new user via API.
 * @property {string} email - The email address of the user.
 * @property {boolean} [is_active=true] - Whether the user is active.
 * @property {boolean} [is_superuser=false] - Whether the user has superuser privileges.
 * @property {string | null} [full_name] - The full name of the user (optional).
 * @property {string} password - The password for the user.
 */
export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password: string
}

/**
 * @description Public user model returned via API (without password hash).
 * @property {string} email - The email address of the user.
 * @property {boolean} [is_active=true] - Whether the user is active.
 * @property {boolean} [is_superuser=false] - Whether the user has superuser privileges.
 * @property {string | null} [full_name] - The full name of the user (optional).
 * @property {string} id - The UUID of the user.
 */
export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  id: string
}

/**
 * @description Model for registering a new user.
 * @property {string} email - The email address of the user.
 * @property {string} password - The password for the user.
 * @property {string | null} [full_name] - The full name of the user (optional).
 */
export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

/**
 * @description A model for returning a list of users with pagination.
 * @property {Array<UserPublic>} data - List of users.
 * @property {number} count - Total number of users.
 */
export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

/**
 * @description Model for updating user data (typically by an admin).
 * @property {string | null} [email] - The user's email address (optional).
 * @property {boolean} [is_active] - The user's active status (optional).
 * @property {boolean} [is_superuser] - The user's superuser status (optional).
 * @property {string | null} [full_name] - The user's full name (optional).
 * @property {string | null} [password] - The user's new password (optional).
 */
export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password?: string | null
}

/**
 * @description Model for the current user updating their own data.
 * @property {string | null} [full_name] - The user's new full name (optional).
 * @property {string | null} [email] - The user's new email address (optional).
 */
export type UserUpdateMe = { full_name?: string | null; email?: string | null }

/**
 * @description A detailed model for a single validation error.
 * @property {Array<string | number>} loc - The location of the error in the request (e.g., ['body', 'email']).
 * @property {string} msg - A human-readable error message.
 * @property {string} type - The type of the error (e.g., 'value_error.email').
 */
export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

/**
 * @description Request data for the Login endpoint.
 * @property {login_access_token} formData - The form data for the access token request.
 */
export type LoginLoginRouterLoginAccessTokenData = {
  formData: login_access_token
}

/**
 * @description Response data for the Login endpoint.
 */
export type LoginLoginRouterLoginAccessTokenResponse = Token

/**
 * @description Response data for the Test Token endpoint.
 */
export type LoginLoginRouterTestTokenResponse = UserPublic

/**
 * @description Request data for the Recover Password endpoint.
 * @property {string} email - The email address to send the recovery link to.
 */
export type LoginLoginRouterRecoverPasswordData = {
  email: string
}

/**
 * @description Response data for the Recover Password endpoint.
 */
export type LoginLoginRouterRecoverPasswordResponse = Message

/**
 * @description Request data for the Reset Password endpoint.
 * @property {NewPassword} requestBody - The new password and token.
 */
export type LoginLoginRouterResetPasswordData = {
  requestBody: NewPassword
}

/**
 * @description Response data for the Reset Password endpoint.
 */
export type LoginLoginRouterResetPasswordResponse = Message

/**
 * @description Request data for the HTML content recovery endpoint.
 * @property {string} email - The email address for which to generate the recovery content.
 */
export type LoginLoginRouterRecoverPasswordHtmlContentData = {
  email: string
}

/**
 * @description Response data for the HTML content recovery endpoint.
 */
export type LoginLoginRouterRecoverPasswordHtmlContentResponse = string

/**
 * @description Request data for reading a paginated list of users.
 * @property {number} [limit=100] - The maximum number of users to return.
 * @property {number} [skip=0] - The number of users to skip.
 */
export type UsersUsersRouterReadUsersData = {
  limit?: number
  skip?: number
}

/**
 * @description Response data for reading a paginated list of users.
 */
export type UsersUsersRouterReadUsersResponse = UsersPublic

/**
 * @description Request data for creating a new user.
 * @property {UserCreate} requestBody - The user creation data.
 */
export type UsersUsersRouterCreateUserData = {
  requestBody: UserCreate
}

/**
 * @description Response data for creating a new user.
 */
export type UsersUsersRouterCreateUserResponse = UserPublic

/**
 * @description Response data for reading the current user's profile.
 */
export type UsersUsersRouterReadUserMeResponse = UserPublic

/**
 * @description Response data for deleting the current user's profile.
 */
export type UsersUsersRouterDeleteUserMeResponse = Message

/**
 * @description Request data for updating the current user's profile.
 * @property {UserUpdateMe} requestBody - The data to update.
 */
export type UsersUsersRouterUpdateUserMeData = {
  requestBody: UserUpdateMe
}

/**
 * @description Response data for updating the current user's profile.
 */
export type UsersUsersRouterUpdateUserMeResponse = UserPublic

/**
 * @description Request data for updating the current user's password.
 * @property {UpdatePassword} requestBody - The current and new passwords.
 */
export type UsersUsersRouterUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

/**
 * @description Response data for updating the current user's password.
 */
export type UsersUsersRouterUpdatePasswordMeResponse = Message

/**
 * @description Request data for registering a new user.
 * @property {UserRegister} requestBody - The user registration data.
 */
export type UsersUsersRouterRegisterUserData = {
  requestBody: UserRegister
}

/**
 * @description Response data for registering a new user.
 */
export type UsersUsersRouterRegisterUserResponse = UserPublic

/**
 * @description Request data for reading a user by their ID.
 * @property {string} id - The UUID of the user to retrieve.
 */
export type UsersUsersRouterReadUserByIdData = {
  id: string
}

/**
 * @description Response data for reading a user by their ID.
 */
export type UsersUsersRouterReadUserByIdResponse = UserPublic

/**
 * @description Request data for updating a user by their ID (admin).
 * @property {string} id - The UUID of the user to update.
 * @property {UserUpdate} requestBody - The data to update.
 */
export type UsersUsersRouterUpdateUserData = {
  id: string
  requestBody: UserUpdate
}

/**
 * @description Response data for updating a user by their ID (admin).
 */
export type UsersUsersRouterUpdateUserResponse = UserPublic

/**
 * @description Request data for deleting a user by their ID (admin).
 * @property {string} id - The UUID of the user to delete.
 */
export type UsersUsersRouterDeleteUserData = {
  id: string
}

/**
 * @description Response data for deleting a user by their ID (admin).
 */
export type UsersUsersRouterDeleteUserResponse = Message

/**
 * @description Request data for the Test Email utility endpoint.
 * @property {string} emailTo - The recipient's email address.
 */
export type UtilsUtilsRouterTestEmailData = {
  emailTo: string
}

/**
 * @description Response data for the Test Email utility endpoint.
 */
export type UtilsUtilsRouterTestEmailResponse = Message

/**
 * @description Response data for the Health Check utility endpoint.
 */
export type UtilsUtilsRouterHealthCheckResponse = Message

/**
 * @description Request data for reading a paginated list of items.
 * @property {number} [limit=100] - The maximum number of items to return.
 * @property {number} [skip=0] - The number of items to skip.
 */
export type ItemsItemsRouterReadItemsData = {
  limit?: number
  skip?: number
}

/**
 * @description Response data for reading a paginated list of items.
 */
export type ItemsItemsRouterReadItemsResponse = ItemsPublic

/**
 * @description Request data for creating a new item.
 * @property {ItemCreate} requestBody - The item creation data.
 */
export type ItemsItemsRouterCreateItemData = {
  requestBody: ItemCreate
}

/**
 * @description Response data for creating a new item.
 */
export type ItemsItemsRouterCreateItemResponse = ItemPublic

/**
 * @description Request data for reading an item by its ID.
 * @property {string} id - The UUID of the item to retrieve.
 */
export type ItemsItemsRouterReadItemData = {
  id: string
}

/**
 * @description Response data for reading an item by its ID.
 */
export type ItemsItemsRouterReadItemResponse = ItemPublic

/**
 * @description Request data for updating an item by its ID.
 * @property {string} id - The UUID of the item to update.
 * @property {ItemUpdate} requestBody - The data to update.
 */
export type ItemsItemsRouterUpdateItemData = {
  id: string
  requestBody: ItemUpdate
}

/**
 * @description Response data for updating an item by its ID.
 */
export type ItemsItemsRouterUpdateItemResponse = ItemPublic

/**
 * @description Request data for deleting an item by its ID.
 * @property {string} id - The UUID of the item to delete.
 */
export type ItemsItemsRouterDeleteItemData = {
  id: string
}

/**
 * @description Response data for deleting an item by its ID.
 */
export type ItemsItemsRouterDeleteItemResponse = Message

/**
 * @description Request data for the private user creation endpoint.
 * @property {UserCreate} requestBody - The user creation data.
 */
export type PrivatePrivateRouterCreateUserData = {
  requestBody: UserCreate
}

/**
 * @description Response data for the private user creation endpoint.
 */
export type PrivatePrivateRouterCreateUserResponse = UserPublic
