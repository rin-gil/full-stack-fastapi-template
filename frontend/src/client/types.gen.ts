// This file is auto-generated by @hey-api/openapi-ts

export type HTTPValidationError = { detail?: Array<ValidationError> }

/**
 * A model for creating a new product via API.
 */
export type ItemCreate = { title: string; description?: string | null }

/**
 * Public model of a product returned via API.
 *
 * @param id UUID of the product.
 * @param owner_id UUID of the user who owns the product.
 */
export type ItemPublic = {
  title: string
  description?: string | null
  id: string
  owner_id: string
}

/**
 * A model for returning a list of items with pagination.
 *
 * @param data List of items.
 * @param count Total number of items.
 */
export type ItemsPublic = {
  data: Array<ItemPublic>
  count: number
}

/**
 * Model for updating product data.
 *
 * @param title Title of the product (optional).
 */
export type ItemUpdate = {
  title?: string | null
  description?: string | null
}

export type login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

/**
 * A model for sending simple text messages.
 *
 * @param message Text message.
 */
export type Message = {
  message: string
}

/**
 * A model for setting a new password using a reset token.
 *
 * @param token Reset token.
 * @param new_password New password.
 */
export type NewPassword = {
  token: string
  new_password: string
}

/**
 * Response model with JWT access token.
 *
 * @param access_token JWT access token.
 * @param token_type Type of token.
 */
export type Token = {
  access_token: string
  token_type?: string
}

/**
 * Model for updating user passwords.
 *
 * @param current_password Current password of the user.
 * @param new_password New password of the user.
 */
export type UpdatePassword = {
  current_password: string
  new_password: string
}

/**
 * Model for creating a new user via API
 *
 * @param password Password of the user.
 */
export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password: string
}

/**
 * Public user model returned via API (without password hash).
 *
 * @param id UUID of the user.
 */
export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  id: string
}

/**
 * Model for registering a new user.
 *
 * @param email Email address of the user.
 * @param password Password of the user.
 * @param full_name Full name of the user (optional).
 */
export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

/**
 * A model for returning a list of users with pagination.
 *
 * @param data List of users.
 * @param count Total number of users.
 */
export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

/**
 * Model for updating user data.
 *
 * @param email Email address of the user (optional).
 * @param password Password of the user (optional).
 */
export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password?: string | null
}

/**
 * Model for updating the current user's data.
 *
 * @param full_name Full name of the user (optional).
 * @param email Email address of the user (optional).
 */
export type UserUpdateMe = { full_name?: string | null; email?: string | null }

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type LoginLoginRouterLoginAccessTokenData = {
  formData: login_access_token
}

export type LoginLoginRouterLoginAccessTokenResponse = Token

export type LoginLoginRouterTestTokenResponse = UserPublic

export type LoginLoginRouterRecoverPasswordData = {
  email: string
}

export type LoginLoginRouterRecoverPasswordResponse = Message

export type LoginLoginRouterResetPasswordData = {
  requestBody: NewPassword
}

export type LoginLoginRouterResetPasswordResponse = Message

export type LoginLoginRouterRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginLoginRouterRecoverPasswordHtmlContentResponse = string

export type UsersUsersRouterReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersUsersRouterReadUsersResponse = UsersPublic

export type UsersUsersRouterCreateUserData = {
  requestBody: UserCreate
}

export type UsersUsersRouterCreateUserResponse = UserPublic

export type UsersUsersRouterReadUserMeResponse = UserPublic

export type UsersUsersRouterDeleteUserMeResponse = Message

export type UsersUsersRouterUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUsersRouterUpdateUserMeResponse = UserPublic

export type UsersUsersRouterUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUsersRouterUpdatePasswordMeResponse = Message

export type UsersUsersRouterRegisterUserData = {
  requestBody: UserRegister
}

export type UsersUsersRouterRegisterUserResponse = UserPublic

export type UsersUsersRouterReadUserByIdData = {
  /**
   * User ID
   */
  id: string
}

export type UsersUsersRouterReadUserByIdResponse = UserPublic

export type UsersUsersRouterUpdateUserData = {
  /**
   * User ID
   */
  id: string
  requestBody: UserUpdate
}

export type UsersUsersRouterUpdateUserResponse = UserPublic

export type UsersUsersRouterDeleteUserData = {
  /**
   * User ID
   */
  id: string
}

export type UsersUsersRouterDeleteUserResponse = Message

export type UtilsUtilsRouterTestEmailData = {
  emailTo: string
}

export type UtilsUtilsRouterTestEmailResponse = Message

export type UtilsUtilsRouterHealthCheckResponse = Message

export type ItemsItemsRouterReadItemsData = {
  limit?: number
  skip?: number
}

export type ItemsItemsRouterReadItemsResponse = ItemsPublic

export type ItemsItemsRouterCreateItemData = {
  requestBody: ItemCreate
}

export type ItemsItemsRouterCreateItemResponse = ItemPublic

export type ItemsItemsRouterReadItemData = {
  /**
   * Item ID
   */
  id: string
}

export type ItemsItemsRouterReadItemResponse = ItemPublic

export type ItemsItemsRouterUpdateItemData = {
  /**
   * Item ID
   */
  id: string
  requestBody: ItemUpdate
}

export type ItemsItemsRouterUpdateItemResponse = ItemPublic

export type ItemsItemsRouterDeleteItemData = {
  /**
   * Item ID
   */
  id: string
}

export type ItemsItemsRouterDeleteItemResponse = Message

export type PrivatePrivateRouterCreateUserData = {
  requestBody: UserCreate
}

export type PrivatePrivateRouterCreateUserResponse = UserPublic
